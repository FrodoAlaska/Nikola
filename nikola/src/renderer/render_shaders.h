#pragma once

#include "nikola/nikola_gfx.h"

inline nikola::GfxShaderDesc generate_default_shader() {
  return nikola::GfxShaderDesc {
    "#version 460 core"
    "\n"
    "layout (location = 0) in vec3 aPos;"
    "layout (location = 1) in vec3 aNormal;"
    "layout (location = 2) in vec2 aTextureCoords;"
    "\n"
    "out VS_OUT {"
    "  vec2 tex_coords;"
    "} vs_out;"
    "\n"
    "layout (std140, binding = 0) uniform Matrices {"
    "  mat4 u_view;"
    "  mat4 u_projection;"
    "};"
    "\n"
    "uniform mat4 u_model;"
    "\n"
    "void main() {"
    "  vs_out.tex_coords = aTextureCoords;"
    "\n"
    "  vec4 world_pos = u_model * vec4(aPos, 1.0);"
    "  gl_Position    = u_projection * u_view * world_pos;"
    "}\n", 

    "#version 460 core"
    "\n"
    "layout (location = 0) out vec4 frag_color;"
    "\n"
    "in VS_OUT {"
    "  vec2 tex_coords;"
    "} fs_in;"
    "\n"
    "struct Material {"
    "  sampler2D diffuse_map;" 
    "  sampler2D specular_map;" 
    "\n"
    "  vec3 ambient, diffuse, specular;"
    "  float shininess;"
    "};"
    "\n"
    "uniform Material u_material;"
    "\n"
    "void main() {"
    "  frag_color = texture(u_material.diffuse_map, fs_in.tex_coords);"
    "}"
  };
}

inline nikola::GfxShaderDesc generate_skybox_shader() {
  return nikola::GfxShaderDesc {
    "#version 460 core"
    "\n"
    "layout (location = 0) in vec3 aTextureCoords;"
    "\n"
    "out VS_OUT {"
    "  vec3 tex_coords;"
    "} vs_out;"
    "\n"
    "layout (std140, binding = 0) uniform Matrices {"
    "  mat4 u_view;"
    "  mat4 u_projection;"
    "};"
    "\n"
    "void main() {"
    "  vs_out.tex_coords = aTextureCoords;"
    "\n"
    "  mat4 model  = u_projection * mat4(mat3(u_view));"  
    "  gl_Position = vec4(model * vec4(aTextureCoords, 1.0)).xyww;"
    "}",

    "#version 460 core"
    "\n"
    "layout (location = 0) out vec4 frag_color;"
    "\n"
    "in VS_OUT {"
    "  vec3 tex_coords;"
    "} fs_in;"
    "\n"
    "uniform samplerCube u_cubemap;"
    "\n"
    "void main() {"
    "  frag_color = texture(u_cubemap, fs_in.tex_coords);"
    "}"
  };
}

inline nikola::GfxShaderDesc generate_framebuffer_shader() {
  return nikola::GfxShaderDesc {
    "#version 460 core"
    "\n"
    "layout (location = 0) in vec2 aPos;"
    "layout (location = 1) in vec2 aTextureCoords;"
    "\n"
    "out VS_OUT {"
    "  vec2 tex_coords;"
    "} vs_out;"
    "\n"
    "void main() {"
    "  vs_out.tex_coords = aTextureCoords;"
    "  gl_Position       = vec4(aPos, 0.0, 1.0);"
    "}",

    "#version 460 core"
    "\n"
    "layout (location = 0) out vec4 frag_color;"
    "\n"
    "in VS_OUT {"
    "  vec2 tex_coords;"
    "} fs_in;"
    "\n"
    "uniform sampler2D u_texture;"
    "\n"
    "void main() {"
    "  frag_color = texture(u_texture, fs_in.tex_coords);"
    "}"
  };
}

inline nikola::GfxShaderDesc generate_hdr_shader() {
  return nikola::GfxShaderDesc {
    "#version 460 core"
    "\n"
    "layout (location = 0) in vec2 aPos;"
    "layout (location = 1) in vec2 aTextureCoords;"
    "\n"
    "out VS_OUT {"
    "  vec2 tex_coords;"
    "} vs_out;"
    "\n"
    "void main() {"
    "  vs_out.tex_coords = aTextureCoords;"
    "  gl_Position       = vec4(aPos, 0.0, 1.0);"
    "}",

    "#version 460 core"
    "\n"
    "layout (location = 0) out vec4 frag_color;"
    "\n"
    "in VS_OUT {"
    "  vec2 tex_coords;"
    "} fs_in;"
    "\n"
    "uniform sampler2D u_texture;"
    "uniform float u_exposure;"
    "\n"
    "void main() {"
    "  const float GAMMA = 2.2;"
    "  vec3 hdr_color    = texture(u_texture, fs_in.tex_coords).rgb;"
    "\n"
    "  vec3 mapped = vec3(1.0) - exp(-hdr_color * u_exposure);"
    "  mapped      = pow(mapped, vec3(1.0 / GAMMA));"
    "\n"
    "  frag_color = vec4(mapped, 1.0);"
    "}"
  };
}

inline nikola::GfxShaderDesc generate_batch_quad_shader() {
  return nikola::GfxShaderDesc {
    "#version 460 core\n"
    "\n"
    "// Layouts\n"
    "layout (location = 0) in vec2 aPos;\n"
    "layout (location = 1) in vec4 aColor;\n"
    "layout (location = 2) in vec2 aTextureCoords;\n"
    "layout (location = 3) in vec2 aShapeSide;\n"
    "\n"
    "// Outputs\n"
    "out VS_OUT {\n"
    "  vec4 out_color;\n"
    "  vec2 tex_coords;\n"
    "\n"
    "  float shape_type;\n"
    "  float sides_count;\n"
    "} vs_out;\n"
    "\n"
    "void main() {\n"
    "  vs_out.out_color  = aColor;\n"
    "  vs_out.tex_coords = aTextureCoords;\n"
    "\n"
    "  vs_out.shape_type  = aShapeSide.x;\n"
    "  vs_out.sides_count = aShapeSide.y;\n"
    "\n"
    "  gl_Position = vec4(aPos, 0.0f, 1.0f);\n"
    "}\n"
    "\n",
  
    "#version 460 core\n"
    ""
    "// Outputs\n"
    "layout (location = 0) out vec4 frag_color;\n"
    ""
    "// Inputs\n"
    "in VS_OUT {\n"
    "  vec4 out_color;\n"
    "  vec2 tex_coords;\n"
    ""
    "  float shape_type;\n"
    "  float sides_count;\n"
    "} fs_in;\n"
    ""
    "// Defines\n"
    "#define PI     3.14159265359\n"
    "#define TWO_PI 6.28318530718\n"
    ""
    "// Uniforms\n"
    "uniform sampler2D u_texture;\n"
    ""
    "vec4 quad_shape() {\n"
    "  return texture(u_texture, fs_in.tex_coords) * fs_in.out_color;\n"
    "}\n"
    ""
    "vec4 circle_shape() {\n"
    "  vec2 uv    = fs_in.tex_coords.xy * 2.0 - 1.0;\n"
    ""
    "  float dist = 1.0 - length(uv);\n"
    "  if(dist < 0.0) {\n"
    "    discard;"
    "  }\n"
    ""
    "  return fs_in.out_color;\n"
    "}\n"
    ""
    "vec4 polygon_shape() {\n"
    "  vec2 uv = fs_in.tex_coords.xy * 2.0 - 1.0;\n"
    ""
    "  float angle  = atan(uv.x, uv.y);\n"
    "  float radius = TWO_PI / fs_in.sides_count;\n"
    ""
    "  float d   = cos(floor(0.5 + angle / radius) * radius - angle) * length(uv);\n"
    "  float val = 1.0 - smoothstep(0.4, 0.41, d);\n"
    "  if(val <= 0.0) {\n"
    "    discard;"
    "  }\n"
    ""
    "  return fs_in.out_color;\n"
    "}\n"
    ""
    "vec4 text_shape() {\n"
    "  return vec4(vec3(fs_in.out_color), texture(u_texture, fs_in.tex_coords).r);\n"
    "}\n"
    ""
    "void main() {\n"
    "  vec4 color = vec4(1.0, 0.0, 1.0, 1.0);\n"
    ""
    "  if(fs_in.shape_type == 0.0) {\n"
    "    color = quad_shape();\n"
    "  }\n"
    "  else if(fs_in.shape_type == 1.0) {\n"
    "    color = circle_shape();\n"
    "  }\n"
    "  else if(fs_in.shape_type == 2.0) {\n"
    "    color = polygon_shape();\n"
    "  }\n"
    "  else if(fs_in.shape_type == 3.0) {\n"
    "    color = text_shape();\n"
    "  }\n"
    ""
    "  frag_color = color;\n"
    "}\n"
  };
}
